name: CI for SteamSuggestor

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Validate branch name
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          VALID_REGEX="^(dev|(feature|bugfix|hotfix|docs)/[a-z0-9-]+)$|^refs/pull/[0-9]+/merge$"
          if [[ ! $BRANCH_NAME =~ $VALID_REGEX ]]; then
            echo "Invalid branch name: $BRANCH_NAME"
            exit 1
          fi

  build:
    runs-on: ${{ matrix.os }}
    needs: check-branch

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            build_type: Release
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            build_type: Release
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libcurl4-openssl-dev

      - name: Setup libcurl
        run: |
          git clone https://github.com/curl/curl.git
          cd curl
          cmake -DCURL_STATICLIB=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/lib/curl .
          cmake --build . --target install

      - name: Set Build Directory
        id: build_dir
        shell: bash
        run: |
          echo "BUILD_DIR=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: |
          cmake -B "${{ steps.build_dir.outputs.BUILD_DIR }}" \
                -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
                -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -S "${{ github.workspace }}"

      - name: Build
        run: cmake --build "${{ steps.build_dir.outputs.BUILD_DIR }}" --config "${{ matrix.build_type }}"

      - name: Run Tests
        working-directory: "${{ steps.build_dir.outputs.BUILD_DIR }}"
        run: ctest --output-on-failure --build-config "${{ matrix.build_type }}"

      - name: Install
        run: cmake --install "${{ steps.build_dir.outputs.BUILD_DIR }}" --prefix install
